name: build-and-push-ghost-image

on:
  workflow_dispatch:
  push:
    paths:
      - "image/**"
      - ".github/workflows/image-deploy.yml"

permissions:
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ vars.IMAGE_TAG_LATEST }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        env:
          REPO_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          SHORT_SHA="${GITHUB_SHA::12}"
          docker buildx build --platform linux/amd64 \
            -t "$REPO_URI:$SHORT_SHA" \
            -t "$REPO_URI:${IMAGE_TAG:-latest}" \
            image \
            --push

      - name: Fetch ECS identifiers
        id: ecs
        env:
          STACK_NAME: GhostInfraStack
        run: |
          CLUSTER=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='EcsClusterName'].OutputValue" --output text)
          SERVICE=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='EcsServiceName'].OutputValue" --output text)
          echo "cluster=$CLUSTER" >> "$GITHUB_OUTPUT"
          echo "service=$SERVICE" >> "$GITHUB_OUTPUT"

      - name: Force ECS deployment
        env:
          CLUSTER: ${{ steps.ecs.outputs.cluster }}
          SERVICE: ${{ steps.ecs.outputs.service }}
        run: |
          aws ecs update-service \
            --cluster "$CLUSTER" \
            --service "$SERVICE" \
            --force-new-deployment \
            --region "$AWS_REGION"
